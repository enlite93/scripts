#!/bin/bash
# Find the exact PLCs that have any file, using csv
# Or find the size of any file on any number of PLCs.
#

# global constants
TEMP_FILE=/tmp/showfiles.dump

function usage { 
    echo "For a single PLC:
    ${0} [FILENAME] [IP]
For multipule PLCs:
    ${0} [FILENAME] [PERCENT] [FILE]

    FILENAME:  The name of the file, path is not needed
          IP:  The IP of the PLC
     PERCENT:  Percent of Disk Usage on PLC(as int, do not append '%')
        FILE:  Path to CSV file from the reporting tool (assumes free_space.csv if not supplied)"

    exit
}

# Cleanup temp files
function cleanup {
    rm -rf $TEMP_FILE
}

# Log in and get top x big files (determined by TOP_FILES)

   

#
# Get args, fail to usage if issues
if [ -z ${1} ]; then
    usage
else
    FileName=${1}
fi
if [ -n "$2" ]; then
    # Checks if $2 is a valid IP
    if [[ $2 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        QUERY=$2
    else 
        PERCENT=${2}
        if [ -z ${3} ]; then
            QUERY=$(cat free_space.csv | awk -F',' '{print $7 " - " $1}' | awk -F'%' '{print $1 $2}' | awk 'int($1)>='$PERCENT | sort -n | awk '{print $3}')
        else
            QUERY=$(cat ${3} | awk -F',' '{print $7 " - " $1}' | awk -F'%' '{print $1 $2}' | awk 'int($1)>='$PERCENT | sort -n | awk '{print $3}')
        fi
    fi
else
    usage
fi

#
# Make sure our file is empty
if [ -n $TEMP_FILE ]; then
    cleanup &>/dev/null
fi

# Get the goods
for plc in ${QUERY}; do
    echo "Checking ${plc}..."
    echo "${plc}:" >> $TEMP_FILE

    ## Find locates file on system. Find also scours the .aufs hidden file, the grep -v removes these dupicate entries
    sshpass -f ~/.plcssh ssh -oStrictHostKeyChecking=no root@${plc} find / -name ${FileName} -exec du -a {} + 2>/dev/null | grep -v .aufs &>> $TEMP_FILE
done

# Display results
printf "****Results****\n\n"
cat $TEMP_FILE

## Clean up and bail
cleanup &>/dev/null
