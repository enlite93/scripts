#!/bin/bash
BUILD_DIR=$(pwd)
VENDOR=${BUILD_DIR}/vendor/aokp

for i in $@; do :; done
DEVICE=$i
APK="${@:(-2):1}"

apk() {
    lunch aokp_${DEVICE}-userdebug
    mmm $APK
}

build() {
	source ~/.pushbullet

	if [ -d "${BUILD_DIR}/vendor/cm" ]; then
		local url1="cm-12"
		local url2="UNOFFICIAL"
	else
		local url1="aokp"
		local url2="nightly"
	fi

    while [ -n "${1}" ]; do
        time brunch $1

        if [ "$?" != 0 ]; then
		 	curl -u v13IMrkYOtKFw6okWwPj0jSnGFB3P8PGmjujCXizwxtBI: -X POST https://api.pushbullet.com/v2/pushes -d device_iden="ujCXizwxtBIdjzWIEVDzOK" -d type="note" -d title="Build Complete" -d body="${1} ROM Built Failed!"
            exit 1
        fi

		rsync -azP --include="aokp_${1}_*.zip" --include="cm-12-*-${1}.zip" --exclude='*' out/target/product/${1}/ xfer.aokp.co:xfer/${1}

		case $1 in
			"shamu")
				curl -u ${APIKEY_MINE} -X POST https://api.pushbullet.com/v2/pushes -d device_iden="${PHONE_MINE}" -d type="link" -d title="Build Complete" -d body="${1} ROM Built Successfully!" -d url="http://xfer.aokp.co/get.php?p=willdeberry/${1}/${url1}-$( date -u +%Y%m%d )-${url2}-${1}.zip"
				;;
			"m7vzw")
				curl -u ${API_KEY_MINE} -X POST https://api.pushbullet.com/v2/pushes -d device_iden="${PHONE_MINE}" -d type="note" -d title="Build Complete" -d body="${1} ROM Built Successfully!"
				curl -u ${APIKEY_WIFE} -X POST https://api.pushbullet.com/v2/pushes -d device_iden="${PHONE_WIFE}" -d type="link" -d title="Build Complete" -d body="${1} ROM Built Successfully!" -d url="http://xfer.aokp.co/get.php?p=willdeberry/${1}/${url1}-$( date -u +%Y%m%d )-${url2}-${1}.zip"
				;;
		esac

        shift 1
    done
}

build-all() {
    cat $VENDOR/vendorsetup.sh | cut -f2 -d ' ' > .build_list
    while read line ;do
        DEVNAME=$(echo $line | cut -f2 -d ' ' | cut -f2 -d '_' | cut -f1 -d '-')
        brunch $DEVNAME
        find . -name aokp_${DEVNAME}_\*.zip -exec cp {} ../files/$DEVNAME/ \; -exec echo "Successfully copied to Androtransfer..." \;
    done < .build_list
    rm .build_list
}

recovery() {
        lunch aokp_${1}-userdebug
        time mka recoveryimage
        if [ "$?" != 0 ]; then
            exit 1
        fi
        shift 1
}

clobber() {
#    make clobber -j16
    rm -rf out/target/product
}

die() {
    exit 0
}

help() {
    echo -e "usage: $0 [OPTIONS] APK DEVICE \n"

    echo "Options:
  -h, --help      Show this help message and exit
  -l, --clean     Runs make clean based on the device
  -c, --clobber   Performs a make clobber on the source
  -s, --sync      Runs a repo sync -j32
  -b, --build     Builds the current source. Requires DEVICE be provided
  -a, --all       Builds all devices listed in $VENDOR/vendorsetup.sh
  -m, --mmm       Compiles the specified apk individually. Requires APK be provided
  -r, --recovery  Compiles the specified device's recovery image."
}

sync() {
    repo sync -j8
}

if [ "$1" == "" ]
then
    help
    exit
else
    cd $BUILD_DIR
    . build/envsetup.sh
fi

for arg
do
    delim=""
    case "$arg" in
        --all) args="${args} -a ";;
        --build) args="${args} -b ";;
        --clobber) args="${args} -c ";;
        --help) args="${args} -h ";;
        --mmm) args="${args} -m ";;
        --sync) args="${args} -s ";;
        --recovery) args="${args} -r ";;
        *) [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args}${delim}${arg}${delim} ";;
    esac
done

eval set -- $args
    while getopts ":hscar:m:b:?" option 2>/dev/null
    do
        case $option in
            a) time build-all
                ;;
            b) build "${@:2}"
                ;;
            c) clobber
                ;;
            h) help
                exit
                ;;
            m) apk
                ;;
            r) recovery "${@:2}"
                ;;
            s) sync
                ;;
            :) echo "Option -$OPTARG requires an argument."
                help
                exit
                ;;
            *) echo $OPTARG is an unrecognized option;
                help
                exit
                ;;
        esac
    done
