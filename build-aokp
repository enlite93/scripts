#!/bin/bash

export USE_CCACHE=1
export CCACHE_DIR=/home/$USER/.ccache

BUILD_DIR=/home/$USER/jb-aokp
DEVICE=$2

function sync {
    repo sync -j32
}

function build {
    remove
    ccache -M 40G
    brunch $ACTION
    find . -name aokp_${DEVICE}_\*.zip -exec scp {} home:/home/will/updates/ \; -exec echo "Successfully copied to Dropbox..." \;
}

function help {
    echo -e "usage: ./build-aokp [OPTIONS] DEVICE \n"

    echo "Options:
  -h, --help      Show this help message and exit
  -l, --clean     Runs make clean based on the device
  -c, --clobber   Performs a make clobber on the source
  -s, --sync      Runs a repo sync -j32
  -b, --build     Builds the current source. Requires DEVICE be provided"
}

function clean {
    lunch aokp_$DEVICE-userdebug
    make clean -j16
}

function clobber {
    make clobber -j16
}

function remove {
    find . -name aokp_${ACTION}_\*.zip -exec rm -rf {} \; -exec echo "Removing previous builds" \;
}

for arg
do
    delim=""
    case "$arg" in
        --help) args="${args} -h ";;
        --clean) args="${args} -l ";;
        --clobber) args="${args} -c ";;
        --sync) args="${args} -s ";;
        --build) args="${args} -b ";;
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args}${delim}${arg}${delim} ";;
    esac
done

eval set -- $args
    while getopts ":hsclb?" option 2>/dev/null
    do
        case $option in
            h) help
                exit
                ;;
            s) sync
                exit
                ;;
            c) clobber
                exit
                ;;
            l) clean
                exit
                ;;
            b) build
                exit
                ;;
            *) echo $OPTARG is an unrecognized option;
                help
                exit
                ;;
        esac
    done

cd $BUILD_DIR
. build/envsetup.sh
