#!/usr/bin/env bash

shopt -s extglob

# Set Variables #############################################################
RED="\e[0;31m"
NORM="\e[0m"
BOLD="\e[1m"
DEFUSER="root"
DEFAULT_APPSERVER_USER="root"
DEST=""
CMD_NAME="$(basename $0)"

SQLUID=scriptuser
SQLPWD=scr1pt
# Can be overridden below based on the facility being specified
SQLDB=db.hq
SQLDBNAME=HQ
VNCPASS="gwnr00t"
LIMIT=${LIMIT:-25}
VNCPASSFILE="$(dirname ~/.)/.qvncpasswd"
MODE="SSH"
FAC="$(hostname -f | cut -d. -f2)" # Helpful for use a Facilities

MYSQL="mysql --connect_timeout=5 "


# Need this syntax for Associative Arrays X=() does not work
### JAM - this doesn't appear to be necessary on my mac
### BNB - this was only required because bash 3.X was installed on macs
###       by default. If you install a real bash (4.X) on your system, qss
###       works perfectly with only a shebang modifier.
###
###       Get homebrew - and install bash:
###         brew install bash
declare -A MODECMD 
declare -A MODEARGS
declare -A MODEPARAMS
declare -A MODENAME
declare -A HOST_USER_OVERRIDE

[ -r ~/.qssrc ] && source ~/.qssrc

# INF Setup
MODEPARAMS[INF]="FUZZY"

# SSH Setup
MODECMD[SSH]="ssh"
MODEARGS[SSH]="-o StrictHostKeyChecking=false -o ConnectTimeout=5"
MODEPARAMS[SSH]="[Supplied Command]"
MODENAME[SSH]="Quick Command"
# VNC Setup
MODECMD[VNC]="vncviewer"
MODEARGS[VNC]="-passwd $VNCPASSFILE"
MODENAME[VNC]="Quick VNC"
# CMD Setup
MODECMD[CMD]="ssh"
MODEARGS[CMD]="-o StrictHostKeyChecking=false"
MODENAME[CMD]="Quick Secure Shell"


#############################################################################
# Usage    ##############################################################
#############################################################################
function Usage() {
	echo -e "
Usage $CMD_NAME [-s] [-i] [-I] [-v] [-c Command] <Search>

	-s          SSH to the specified device (Default)
	-i          Provide Information about the specified facility or device (Fuzzy Search)
	-I          Provide Information about the specified facility (Exact Search)
	-v          VNC to the specified device
	-c Command  Execute the Command Specified on the Specified device

  Search      Search Term to lookup. Can be in the form of a Facility Code, 
              a Full IP, the Last Octet, the Last 2 Octets, or the word ${BOLD}Empty${NORM}
              whihc will return Empty (Alive) Rooms. Note: ${BOLD}Empty${NORM} only works at the facility
              at the moment

	Examples:

		$CMD_NAME -s ${RED}CLA${NORM}                  >>> $MODECMD ${DEFAULT_APPSERVER_USER}@appserver.${RED}CLA${NORM}.gwn ${MODEPARAMS[SSH]}
		$CMD_NAME -s ${RED}86${NORM}                   >>> $MODECMD ${DEFUSER}@10.1.1.${RED}86${NORM} ${MODEPARAMS[SSH]}
		$CMD_NAME -s ${RED}4.12${NORM}                 >>> $MODECMD ${DEFUSER}@10.1.${RED}4.12${NORM} ${MODEPARAMS[SSH]}
		$CMD_NAME -s ${RED}10.5.20.136${NORM}          >>> $MODECMD ${DEFUSER}@${RED}10.5.20.136${NORM} ${MODEPARAMS[SSH]}
		$CMD_NAME -s ${RED}bob@colossus.hq${NORM}      >>> $MODECMD ${RED}bob@colossus.hq${NORM} ${MODEPARAMS[SSH]}

		$CMD_NAME -v ${RED}86${NORM}                   >>> $MODECMD ${DEFUSER}@10.1.1.${RED}86${NORM} ${MODEPARAMS[VNC]}
		$CMD_NAME -v ${RED}4.12${NORM}                 >>> $MODECMD ${DEFUSER}@10.1.${RED}4.12${NORM} ${MODEPARAMS[VNC]}

		$CMD_NAME -c 'uptime' ${RED}CLA${NORM}         >>> $MODECMD ${DEFAULT_APPSERVER_USER}@appserver.${RED}CLA${NORM}.gwn ${MODEPARAMS[CMD]} uptime 
		$CMD_NAME -c 'reboot' ${RED}10.5.20.136${NORM} >>> $MODECMD ${DEFUSER}@${RED}10.5.20.136${NORM} ${MODEPARAMS[CMD]} reboot 
	
		$CMD_NAME -i ${RED}10.5.20.136${NORM}          >>> returns information on ${RED}10.5.20.136${NORM}
		$CMD_NAME -i ${RED}wesley${NORM}               >>> returns information on the Facilities whose name or code matches ${RED}*wesley*${NORM} 

		$CMD_NAME -I ${RED}ACD${NORM}                  >>> returns information on the ${RED}ACD${NORM} Facility
		"
	exit 1;
}

#############################################################################
# NarrowSearch ##############################################################
#############################################################################
# Allow the User to select from a list of results and when a valid selection
# is made, set the DESTUSER and DESTHOST variables
#############################################################################
function NarrowSearch() {
	while true
	do
		PMT="Enter Number to Connect To: [0] "
		[ "$MODE" == "CMD" ] && PMT="Enter Number to Connect To Or * for All: [0] "
		read -p "$PMT" ROW
		ROW=${ROW:-0}
		if [ "$ROW" == "*" -a "$MODE" == "CMD" ] ; then
			DESTUSER="root"
			DESTHOST="$IPLIST"
			return;
		else
			if [ "$ROW" == "0" ] ; then
				exit 0
			else
				SELROW=$(echo -e "$RES" | grep "^${ROW}\W")
				if [ -z "$SELROW" ] ; then
					echo "Invalid Row Number. Try Again"
				else
					DESTUSER="root"
					DESTHOST="$(echo $SELROW | awk '{print $2}')"
					return
				fi
			fi
		fi
	done
}

#############################################################################
# ParseSearch ###############################################################
#############################################################################
# Based on the format of the argument, figure out what it is and set DESTUSER
# and DESTHOST
#############################################################################
function ParseSearch() {


	SKIP_TESTS=no
	### getent doesn't exist on mac and figuring out dscl is more than i feel like doing today, so...
	if [ "$(uname -s)" != "Darwin" ]; then
		if getent hosts | fgrep -wq "${1}" ; then
			# It's in /etc/hosts, just leave it as-is and skip the tests
			DESTUSER="${DEFUSER}"
			DESTHOST="${1}"
			SKIP_TESTS=yes
		fi
	fi

	if [ "${SKIP_TESTS}" != "yes" ]; then
		case "$1" in
			[A-Za-z][A-Za-z][A-Za-z0-9]?([A-Z0-9a-z\-])?([A-Za-z]) )
				# Simple Facility Code	
				DESTUSER="${DEFAULT_APPSERVER_USER}"
				DESTHOST="appserver.$1.gwn"
				;;
		
			[0-9]?([0-9])?([0-9]) ) # Last HQ (.1) Octet
				DESTUSER="${DEFUSER}"
				DESTHOST="10.1.1.$1"
				;;
		
			[0-9]?([0-9])?([0-9]).[0-9]?([0-9])?([0-9]) ) # Last 2 Octets
				DESTUSER="${DEFUSER}"
				DESTHOST="10.1.$1"
				;;

			[0-9]?([0-9])?([0-9]).[0-9]?([0-9])?([0-9]).[0-9]?([0-9])?([0-9]).[0-9]?([0-9])?([0-9]) ) # Full IP	
				DESTUSER="${DEFUSER}"
				DESTHOST="$1"
				;;

			*)  # Unknown
				DEST="$1"
				if [[ "$DEST" =~ /.*@.*/ ]] ; then
					DESTHOST=${DEST#*@}
					DESTUSER=${DEST%@*}
				else
					DESTUSER=${DEFUSER}
					DESTHOST=${DEST}
				fi
				;;

		esac
	fi

	DESTUSER="${HOST_USER_OVERRIDE["${DESTHOST}"]:-${DESTUSER}}"
}

#############################################################################
# DisplayMatches ############################################################
#############################################################################
# Based on a Facility Code and search String, locate possible matches 
# and present a list of matches to the user
#############################################################################
function DisplayMatches() {
	FAC=$1
	SEARCH="$2"
	declare -A SQL
	SQL[HQ]="SET @r = 0; SELECT @r:=@r+1 as '#', IPAddress, IFNULL(Unit,' ') as Unit, IFNULL(Room,' ') as Room, Bed, 
		IF(Monitored,'Yes','No') as 'Monitored', IF(Alive,'Yes','No') as 'Alive', 
		IF(ISNULL(browserVersion) OR browserVersion = 'NULL' OR INSTR(browserVersion,'HW/')<= 0,'Unknown',SUBSTR(browserVersion,3+INSTR(browserVersion,'HW/'),
			LOCATE(' ', browserVersion, INSTR(browserVersion,'HW/'))-INSTR(browserVersion,'HW/')-3)) as 'Hardware',
		IF(ISNULL(browserVersion) OR browserVersion = 'NULL' OR INSTR(browserVersion,'PLC/')<= 0,'Unknown',SUBSTR(browserVersion,4+INSTR(browserVersion,'PLC/'),
			LOCATE(' ', browserVersion, INSTR(browserVersion,'PLC/'))-INSTR(browserVersion,'PLC/')-4)) as 'PLC',
		'Unknown' as 'Occupancy'
		FROM BedLists WHERE (FacilityCode = '$FAC' AND (Room Like '%$SEARCH%' OR roomLocation Like '%$SEARCH%' OR Unit Like '%$SEARCH%')) OR (IPAddress = '$SEARCH') LIMIT $LIMIT"

	SQL[GWN_R5]="SET @r = 0; SELECT @r:=@r+1 as '#', IPAddress, Unit, Room, Bed, IF(Monitored,'Yes','No') as 'Monitored', 
		IF(Alive,'Yes','No') as 'Alive', 
		IF(ISNULL(lastKnownUserAgent) OR lastKnownUserAgent = 'NULL' OR NOT INSTR(lastKnownUserAgent,'HW/'),'Unknown',SUBSTR(lastKnownUserAgent,3+INSTR(lastKnownUserAgent,'HW/'),
			LOCATE(' ', lastKnownUserAgent, INSTR(lastKnownUserAgent,'HW/'))-INSTR(lastKnownUserAgent,'HW/')-3)) as 'Hardware',
		IF(ISNULL(lastKnownUserAgent) OR lastKnownUserAgent = 'NULL' OR NOT INSTR(lastKnownUserAgent,'PLC/'),'Unknown',SUBSTR(lastKnownUserAgent,4+INSTR(lastKnownUserAgent,'PLC/'),
			LOCATE(' ', lastKnownUserAgent, INSTR(lastKnownUserAgent,'PLC/'))-INSTR(lastKnownUserAgent,'PLC/')-4)) as 'PLC',
		IF(ISNULL(_currentVisitId),'Empty','Occupied') as 'Occupancy'
		FROM DEV_DisplayDevice
		INNER JOIN DEV_HL7LocationAlias ON DEV_DisplayDevice._userLocationId = DEV_HL7LocationAlias._userLocationId
		INNER JOIN DEV_UserLocation ON DEV_HL7LocationAlias._userLocationId = DEV_UserLocation.userLocationId
		WHERE ((Room Like '%$SEARCH%' OR roomLocation Like '%$SEARCH%' OR Unit Like '%$SEARCH%')) OR (IPAddress = '$SEARCH') OR ('$SEARCH' like 'Empty' AND _currentVisitId IS NULL AND Alive = 1) LIMIT $LIMIT"
	RES=$($MYSQL -h $SQLDB -u $SQLUID -p$SQLPWD -e "${SQL[$SQLDBNAME]}" $SQLDBNAME)
	IPLIST="$(echo -e "$RES" | awk 'NR > 1 {print $2}' | xargs)"
	if [ -n "$RES" ] ; then
		echo "$RES" | awk -v BOLD=$'\e[1m' -v NORM=$'\e[0m' 'NR==1 {printf("%s\n%s%s\n",BOLD,$0,NORM); gsub(/[a-zA-z0-9#]/,"-"); print} NR!=1 {print}' | column -t
		echo -e "\nIPs: $IPLIST\n"
		return 0
	else
		echo "Sorry - No Rooms match *$ARG*."
		return 1;
	fi
}
		


#############################################################################
# ReverseLookup #############################################################
#############################################################################
# Based on an IP Address, Display Information about it
#############################################################################
function ReverseLookup() {
	declare -A RSQL
	SEARCH="$1"
	RSQL[GWN_R5]="SELECT
			DEV_DisplayDevice.ipAddress as 'IP Address',
			'$FAC' as 'Facility Code',
			Concat(Facility, '-',Unit,'-',Room,'-',Bed) as Location,
			DEV_HL7LocationAlias.facility as 'Facility',
			DEV_HL7LocationAlias.unit as 'Unit',
			DEV_HL7LocationAlias.room as 'Room',
			DEV_HL7LocationAlias.bed as 'Bed',
			IF(Monitored,'Yes','No') as 'Monitored',
			IF(Alive,'Yes','No') as 'Alive', 
			IF(ISNULL(lastKnownUserAgent) OR lastKnownUserAgent = 'NULL' OR NOT INSTR(lastKnownUserAgent,'HW/'),'Unknown',SUBSTR(lastKnownUserAgent,3+INSTR(lastKnownUserAgent,'HW/'),
				LOCATE(' ', lastKnownUserAgent, INSTR(lastKnownUserAgent,'HW/'))-INSTR(lastKnownUserAgent,'HW/')-3)) as 'Hardware',
			IF(ISNULL(lastKnownUserAgent) OR lastKnownUserAgent = 'NULL' OR NOT INSTR(lastKnownUserAgent,'PLC/'),'Unknown',SUBSTR(lastKnownUserAgent,4+INSTR(lastKnownUserAgent,'PLC/'),
				LOCATE(' ', lastKnownUserAgent, INSTR(lastKnownUserAgent,'PLC/'))-INSTR(lastKnownUserAgent,'PLC/')-4)) as 'PLC',
			IF(ISNULL(_currentVisitId),'Empty','Occupied') as 'Occupancy'
			FROM
			DEV_DisplayDevice
			INNER JOIN DEV_HL7LocationAlias ON DEV_DisplayDevice._userLocationId = DEV_HL7LocationAlias._userLocationId
			INNER JOIN DEV_UserLocation ON DEV_HL7LocationAlias._userLocationId = DEV_UserLocation.userLocationId
			WHERE (IPAddress = '$SEARCH') LIMIT $LIMIT"
	RSQL[HQ]="SELECT 
			IPAddress as 'IP Address', 
			FacilityCode as 'Facility Code', 
			Concat(Facility, '-',Unit,'-',Room,'-',Bed) as Location,
			Facility, Unit, Room, Bed, 
			IF(Monitored,'Yes','No') as 'Monitored',
			IF(Alive,'Yes','No') as 'Alive', 
			IF(ISNULL(browserVersion) OR browserVersion = 'NULL' OR INSTR(browserVersion,'HW/') <= 0,'Unknown',SUBSTR(browserVersion,3+INSTR(browserVersion,'HW/'),
				LOCATE(' ', browserVersion, INSTR(browserVersion,'HW/'))-INSTR(browserVersion,'HW/')-3)) as 'Hardware Type',
			IF(ISNULL(browserVersion) OR browserVersion = 'NULL' OR INSTR(browserVersion,'PLC/') <= 0,'Unknown',SUBSTR(browserVersion,4+INSTR(browserVersion,'PLC/'),
				LOCATE(' ', browserVersion, INSTR(browserVersion,'PLC/'))-INSTR(browserVersion,'PLC/')-4)) as 'PLC Version',
			'Unknown' as Occupancy
			FROM BedLists 
			WHERE (IPAddress = '$SEARCH') LIMIT $LIMIT"
	
	# Figure Out if We can Use a Facility DB
	RES=$($MYSQL -h db.hq -u $SQLUID -p$SQLPWD -e "SELECT FacilityCode From BedLists Where IPADDRESS = '$SEARCH' LIMIT 1" -B -N HQ)
	if [ -n "$RES" ] ; then
	    SQLDB=db.$RES.gwn
	    SQLDBNAME=GWN_R5
	fi
	echo "------------------------------------------------------"
	echo " Reverse Lookup Using $SQLDB to obtain Information" 

	RES=$($MYSQL -h $SQLDB -u $SQLUID -p$SQLPWD -e "${RSQL[$SQLDBNAME]}" -E $SQLDBNAME | grep -v '^\*\*')
	if [ -n "$RES" ] ; then
		echo "------------------------------------------------------" 
		echo -e "${RES}"
		echo "------------------------------------------------------" 
		return 0
	else
		echo "Sorry - No Information for IP $ARG."
		return 1;
	fi
}


function GetFacilityInfo() {
	TERM="${1:-XXX}"
	SEARCHMODE="${2:-FUZZY}"
	SQL="SELECT FacilityID, FacilityName, IFNULL(HealthSystem, 'N/A') as System, CONCAT(City, ', ', State) as Location, 
	        (select COUNT(DISTINCT ipaddress) from BedLists where FacilityCode = FacilityID and monitored = 1) as BedCount,
	        (SELECT GROUP_CONCAT(vCountText SEPARATOR ', ') FROM PLCVersionCount WHERE FacilityCode = FacilityID) as PLCVersions,
	        (SELECT GROUP_CONCAT(hwCountText SEPARATOR ', ') FROM PLCHWTypeCount WHERE FacilityCode = FacilityID) as Hardware
	        FROM Facilities WHERE FacilityID = '$TERM'"
	if [ "$SEARCHMODE" == "FUZZY" ] ; then
		SQL="$SQL OR FacilityName Like '%$TERM%'\G"
	else # EXACT
		SQL="$SQL\G"
	fi
	$MYSQL -B -h $SQLDB -u $SQLUID -p$SQLPWD -e "${SQL}" -E $SQLDBNAME | sed 's/^\*.*\*$/------------------------------------------------------/g'
	echo "------------------------------------------------------" 
}

# Process Params ############################################################
while getopts "Iic:vs" flag
do
	case $flag in
		i)  MODE="INF"
			MODEPARAMS[INF]="FUZZY"
			;;
		I)  MODE="INF"
			MODEPARAMS[INF]="EXACT"
			;;
		c)  MODE="CMD"
			REMOTE_CMD="${OPTARG}";
			;;
		v)  MODE="VNC"
			;;
		s)  MODE="SSH"
			;;
		*)  Usage;
			;;
	esac
done
shift $(( $OPTIND-1 ))

# Process Args ##############################################################


if [ $# -eq 0 ] ; then 
	Usage
else 
	if [ $# -ge 2 ] ; then # Search Term in Format XXX YYY ... where XXX is a Facility Code
		FAC=$1; shift
		ARG="$@"

		# We know the facility - use the database there
		SQLDB=db.$FAC.gwn
		SQLDBNAME=GWN_R5
				
		DisplayMatches "$FAC" "$ARG" || exit 1;
		NarrowSearch
	else # Search Term is single word
		ParseSearch "$1"
	fi
fi

# Do the Actual Thing...


case "$MODE" in
	"INF")
		if [[ "$DESTHOST" == [0-9]*\.[0-9]*\.[0-9]*\.[0-9]* ]] ; then
			ReverseLookup "$DESTHOST"
		else
			GetFacilityInfo $1 ${MODEPARAMS[$MODE]} 
		fi
		;;
	"SSH") 	
		echo "Connecting via ${MODECMD[$MODE]} to $DESTUSER@$DESTHOST..."
		exec ${MODECMD[$MODE]} ${MODEARGS[$MODE]} $DESTUSER@$DESTHOST
		;;
	"VNC") echo "Connecting via ${MODECMD[$MODE]} to $DESTHOST..."
		[ -f $VNCPASSFILE ] || echo -e "$VNCPASS\n$VNCPASS" | vncpasswd $VNCPASSFILE # >/dev/null 2>&1
		#trap "rm -f $VNCPASSFILE" EXIT
		exec ${MODECMD[$MODE]} ${MODEARGS[$MODE]} $DESTHOST &
		;;
	"CMD") 
		if [ $(echo $DESTHOST | wc -w) -gt 1 ] ; then 	
			echo -e "Connecting via ${MODECMD[$MODE]} as $DESTUSER on the following hosts: \n\n$DESTHOST\n\nTo Issue Command: $REMOTE_CMD"
		else
			echo "Connecting via ${MODECMD[$MODE]} as $DESTUSER@$DESTHOST To Issue Command: $REMOTE_CMD"
		fi
		echo ""
		for HOST in $DESTHOST
		do
			[ "$CONFIRM" == "ALL" ] || read -p "Press Enter to continue, or type ALL to run without confirmation..." CONFIRM
			echo -n "$HOST: "
			${MODECMD[$MODE]} ${MODEARGS[$MODE]} $DESTUSER@$HOST $REMOTE_CMD
		done
		;;
esac

